name: build-linux-amd64-wheels
'on':
  workflow_dispatch:
    inputs:
      name:
        type: string
        description: Pkg to build (empty for all)
        required: false
      graalpy:
        type: string
        description: GraalPy download url prefix (empty for default)
        required: false
jobs:
  psutil-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'psutil' || inputs.name
      == 'tensorflow') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) psutil
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: psutil-linux-amd64
          path: psutil*.whl
          if-no-files-found: error
  numpy-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs: psutil-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'numpy' || inputs.name
      == 'pandas' || inputs.name == 'contourpy' || inputs.name == 'matplotlib' ||
      inputs.name == 'scipy' || inputs.name == 'scikit-learn' || inputs.name == 'torch'
      || inputs.name == 'opt_einsum' || inputs.name == 'Keras_Preprocessing' || inputs.name
      == 'tensorflow') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |-
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
          dnf install -y gcc-toolset-12-gcc-gfortran openblas-devel
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from psutil
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: psutil-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) numpy
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: numpy-linux-amd64
          path: numpy*.whl
          if-no-files-found: error
  pandas-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs: numpy-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'pandas') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |-
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
          dnf install -y openblas
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from numpy
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: numpy-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) pandas
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: pandas-linux-amd64
          path: pandas*.whl
          if-no-files-found: error
  pybind11-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs: pandas-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'pybind11' || inputs.name
      == 'contourpy' || inputs.name == 'kiwisolver' || inputs.name == 'torch' || inputs.name
      == 'matplotlib') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from pandas
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: pandas-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) pybind11
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: pybind11-linux-amd64
          path: pybind11*.whl
          if-no-files-found: error
  ninja-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs: pybind11-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'ninja' || inputs.name
      == 'contourpy' || inputs.name == 'torch' || inputs.name == 'matplotlib') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from pybind11
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: pybind11-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) ninja
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: ninja-linux-amd64
          path: ninja*.whl
          if-no-files-found: error
  pillow-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs: ninja-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'pillow' || inputs.name
      == 'matplotlib') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |-
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
          dnf install -y libtiff-devel libjpeg-devel openjpeg2-devel zlib-devel freetype-devel lcms2-devel libwebp-devel
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from ninja
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: ninja-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) pillow
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: pillow-linux-amd64
          path: pillow*.whl
          if-no-files-found: error
  contourpy-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs:
      - ninja-linux-amd64
      - pybind11-linux-amd64
      - numpy-linux-amd64
      - pillow-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'contourpy' || inputs.name
      == 'matplotlib') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from ninja
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: ninja-linux-amd64
      - name: Download artifacts from pybind11
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: pybind11-linux-amd64
      - name: Download artifacts from numpy
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: numpy-linux-amd64
      - name: Download artifacts from pillow
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: pillow-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) contourpy
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: contourpy-linux-amd64
          path: contourpy*.whl
          if-no-files-found: error
  kiwisolver-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs:
      - pybind11-linux-amd64
      - contourpy-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'kiwisolver' || inputs.name
      == 'matplotlib') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from pybind11
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: pybind11-linux-amd64
      - name: Download artifacts from contourpy
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: contourpy-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) kiwisolver
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: kiwisolver-linux-amd64
          path: kiwisolver*.whl
          if-no-files-found: error
  matplotlib-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs:
      - pillow-linux-amd64
      - kiwisolver-linux-amd64
      - numpy-linux-amd64
      - contourpy-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'matplotlib') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |-
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
          dnf install -y openblas
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from pillow
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: pillow-linux-amd64
      - name: Download artifacts from kiwisolver
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: kiwisolver-linux-amd64
      - name: Download artifacts from numpy
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: numpy-linux-amd64
      - name: Download artifacts from contourpy
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: contourpy-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) matplotlib
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: matplotlib-linux-amd64
          path: matplotlib*.whl
          if-no-files-found: error
  scipy-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs:
      - numpy-linux-amd64
      - matplotlib-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'scipy' || inputs.name
      == 'scikit-learn') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |-
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
          dnf install -y gcc-toolset-12-gcc-gfortran openblas-devel
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from numpy
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: numpy-linux-amd64
      - name: Download artifacts from matplotlib
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: matplotlib-linux-amd64
      - name: Build wheel
        run: |-
          export FFLAGS=-fallow-argument-mismatch
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) scipy
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: scipy-linux-amd64
          path: SciPy*.whl
          if-no-files-found: error
  scikit-learn-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs:
      - numpy-linux-amd64
      - scipy-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'scikit-learn') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |-
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
          dnf install -y openblas
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from numpy
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: numpy-linux-amd64
      - name: Download artifacts from scipy
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: scipy-linux-amd64
      - name: Build wheel
        run: |-
          export FFLAGS=-fallow-argument-mismatch
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) scikit-learn
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: scikit-learn-linux-amd64
          path: scikit*learn*.whl
          if-no-files-found: error
  cffi-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs: scikit-learn-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'cffi' || inputs.name
      == 'torch') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |-
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
          dnf install -y libffi-devel
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from scikit-learn
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: scikit-learn-linux-amd64
      - name: Build wheel
        run: |-
          graalpy/bin/graalpy -m pip install wheel
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) cffi
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: cffi-linux-amd64
          path: cffi*.whl
          if-no-files-found: error
  PyYAML-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs: cffi-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'PyYAML' || inputs.name
      == 'torch') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from cffi
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: cffi-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) PyYAML
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: PyYAML-linux-amd64
          path: PyYAML*.whl
          if-no-files-found: error
  cmake-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs: PyYAML-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'cmake' || inputs.name
      == 'torch') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from PyYAML
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: PyYAML-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) cmake
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: cmake-linux-amd64
          path: cmake*.whl
          if-no-files-found: error
  ujson-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs: cmake-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'ujson') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from cmake
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: cmake-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) ujson
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: ujson-linux-amd64
          path: ujson*.whl
          if-no-files-found: error
  torch-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs:
      - numpy-linux-amd64
      - ninja-linux-amd64
      - cmake-linux-amd64
      - pybind11-linux-amd64
      - cffi-linux-amd64
      - PyYAML-linux-amd64
      - ujson-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'torch') }}
    env:
      MAX_JOBS: 4
      BUILD_TEST: 0
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |-
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
          dnf install -y openblas-devel /usr/bin/cmake /usr/bin/sudo libffi-devel
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from numpy
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: numpy-linux-amd64
      - name: Download artifacts from ninja
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: ninja-linux-amd64
      - name: Download artifacts from cmake
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: cmake-linux-amd64
      - name: Download artifacts from pybind11
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: pybind11-linux-amd64
      - name: Download artifacts from cffi
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: cffi-linux-amd64
      - name: Download artifacts from PyYAML
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: PyYAML-linux-amd64
      - name: Download artifacts from ujson
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: ujson-linux-amd64
      - name: Build wheel
        run: |-
          export USE_CUDA=0
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) torch
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: torch-linux-amd64
          path: torch*.whl
          if-no-files-found: error
  opt_einsum-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs:
      - numpy-linux-amd64
      - torch-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'opt_einsum' || inputs.name
      == 'tensorflow') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from numpy
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: numpy-linux-amd64
      - name: Download artifacts from torch
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: torch-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) opt_einsum
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: opt_einsum-linux-amd64
          path: opt*einsum*.whl
          if-no-files-found: error
  Keras_Preprocessing-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs:
      - numpy-linux-amd64
      - opt_einsum-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'Keras_Preprocessing'
      || inputs.name == 'tensorflow') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from numpy
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: numpy-linux-amd64
      - name: Download artifacts from opt_einsum
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: opt_einsum-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) Keras_Preprocessing
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: Keras_Preprocessing-linux-amd64
          path: Keras*Preprocessing*.whl
          if-no-files-found: error
  grpcio-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs: Keras_Preprocessing-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'grpcio' || inputs.name
      == 'tensorflow') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from Keras_Preprocessing
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: Keras_Preprocessing-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) grpcio
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: grpcio-linux-amd64
          path: grpcio*.whl
          if-no-files-found: error
  ml_dtypes-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs: grpcio-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'ml_dtypes' || inputs.name
      == 'tensorflow') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from grpcio
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: grpcio-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) ml_dtypes
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: ml_dtypes-linux-amd64
          path: ml*dtypes*.whl
          if-no-files-found: error
  wrapt-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs: ml_dtypes-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'wrapt' || inputs.name
      == 'tensorflow') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from ml_dtypes
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: ml_dtypes-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) wrapt
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: wrapt-linux-amd64
          path: wrapt*.whl
          if-no-files-found: error
  h5py-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs: wrapt-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'h5py' || inputs.name
      == 'tensorflow') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |-
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
          dnf install -y hdf5-devel
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from wrapt
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: wrapt-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) h5py
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: h5py-linux-amd64
          path: h5py*.whl
          if-no-files-found: error
  tensorflow-linux-amd64:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    needs:
      - grpcio-linux-amd64
      - psutil-linux-amd64
      - wrapt-linux-amd64
      - ml_dtypes-linux-amd64
      - h5py-linux-amd64
      - numpy-linux-amd64
      - opt_einsum-linux-amd64
      - Keras_Preprocessing-linux-amd64
    if: ${{ !cancelled() && (inputs.name == '' || inputs.name == 'tensorflow') }}
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies
        run: |-
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
          dnf install -y openblas-devel /usr/bin/cmake /usr/bin/sudo /usr/bin/curl java-11-openjdk-devel
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup custom GraalPy
        if: inputs.graalpy != ''
        run: |-
          curl -L -o graalpy.tar.gz ${{ inputs.graalpy }}-linux-amd64.tar.gz
          mkdir -p graalpy
          tar -C $(pwd)/graalpy --strip-components=1 -xzf graalpy.tar.gz
          graalpy/bin/graalpy -s -m ensurepip
          graalpy/bin/graalpy -m pip install wheel
      - name: Setup GraalPy
        uses: actions/setup-python@v5
        if: inputs.graalpy == ''
        with:
          python-version: graalpy24.0
      - name: Setup local GraalPy venv
        if: inputs.graalpy == ''
        run: python -m venv graalpy
      - name: Download artifacts from grpcio
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: grpcio-linux-amd64
      - name: Download artifacts from psutil
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: psutil-linux-amd64
      - name: Download artifacts from wrapt
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: wrapt-linux-amd64
      - name: Download artifacts from ml_dtypes
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: ml_dtypes-linux-amd64
      - name: Download artifacts from h5py
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: h5py-linux-amd64
      - name: Download artifacts from numpy
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: numpy-linux-amd64
      - name: Download artifacts from opt_einsum
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: opt_einsum-linux-amd64
      - name: Download artifacts from Keras_Preprocessing
        uses: actions/download-artifact@main
        continue-on-error: true
        with:
          name: Keras_Preprocessing-linux-amd64
      - name: Build wheel
        run: |-
          export PIP_FIND_LINKS=$(pwd)
          pip install pip numpy wheel packaging requests opt_einsum
          pip install keras_preprocessing --no-deps
          curl -L https://github.com/bazelbuild/bazel/releases/download/6.4.0/bazel-6.4.0-linux-x86_64 -o $(pwd)/graalpy/bin/bazel
          chmod +x graalpy/bin/bazel
          export PATH=$(pwd)/graalpy/bin/:$PATH
          bazel --version
          export PIP_FIND_LINKS=$(pwd)
          export PATH=$(pwd)/graalpy/bin/:$PATH
          graalpy/bin/graalpy -m pip wheel --find-links $(pwd) tensorflow
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: tensorflow-linux-amd64
          path: tensorflow*.whl
          if-no-files-found: error
